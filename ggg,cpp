#include <graphics.h>
#include <iostream>
using namespace std;

// Function to plot points in all eight octants
void plotCirclePoints(int x_center, int y_center, int x, int y) {
    putpixel(x_center + x, y_center + y, WHITE);
    putpixel(x_center - x, y_center + y, WHITE);
    putpixel(x_center + x, y_center - y, WHITE);
    putpixel(x_center - x, y_center - y, WHITE);
    putpixel(x_center + y, y_center + x, WHITE);
    putpixel(x_center - y, y_center + x, WHITE);
    putpixel(x_center + y, y_center - x, WHITE);
    putpixel(x_center - y, y_center - x, WHITE);
}

// Midpoint Circle Algorithm
void midpointCircle(int x_center, int y_center, int radius) {
    int x = 0;
    int y = radius;
    int p = 1 - radius;  // Initial decision parameter

    // Plot the initial set of points
    plotCirclePoints(x_center, y_center, x, y);

    while (x < y) {
        x++;
        if (p < 0) {
            p += 2 * x + 1;  // Choose the right pixel
        } else {
            y--;
            p += 2 * (x - y) + 1;  // Choose the diagonal pixel
        }
        // Plot the new set of points
        plotCirclePoints(x_center, y_center, x, y);
    }
}

int main() {
    int gd = DETECT, gm;  // Initialize graphics mode
    initgraph(&gd, &gm, NULL);

    int x_center = 200;  // Center of the circle
    int y_center = 200;  // Center of the circle
    int radius = 100;    // Radius of the circle

    cout << "Drawing circle using Midpoint Circle Algorithm..." << endl;

    midpointCircle(x_center, y_center, radius);

    // Hold the window until a key is pressed
    getch();

    // Close the graphics window
    closegraph();

    return 0;
}
